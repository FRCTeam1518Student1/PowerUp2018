// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1518.robot;

import org.usfirst.frc1518.robot.commands.*;
import org.usfirst.frc1518.robot.subsystems.*;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import edu.wpi.cscore.AxisCamera;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

//import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.smartdashboard.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends TimedRobot {

    Command autoMode;

    public static OI oi;
    public static RobotMap rm;
    public static Pneumatics pn;
    
    //Hardware
    public static MecanumDrive m_drive;
	public static UsbCamera cam0;
	public static AxisCamera cam1;
	
    //SubSystems
    public static Servos servos;
    public static Pneumatics pneumatics;
    public static Launcher launcher;

    //Setup
    public static double feedSpeed;
	public static boolean isReversed = true;
	public static boolean intakeOn;
	public static boolean isTestBot = true;
	public static String alliance = "";
	
	//Joystick Deadspace Controls
	public static double mainstickX;
	public static double mainstickY;
	public static double mainstickZ;

	SendableChooser<Command> m_chooser = new SendableChooser<>();

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
	public void robotInit() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        oi = new OI();
    	rm = new RobotMap();
    	rm.init();

    	pn = new Pneumatics();
    	
    	rm.comp0.setClosedLoopControl(true);
    	m_drive = new MecanumDrive(rm.driveTrainFrontLeftWheel, rm.driveTrainRearLeftWheel, rm.driveTrainFrontRightWheel, rm.driveTrainRearRightWheel);
    	servos = new Servos();
        rm.dio8.set(true);
        rm.dio9.set(true);
        rm.rioGyro.calibrate();
        rm.encoderLRear.reset();
        rm.encoderRRear.reset();

        //Camera setup
        cam0 = CameraServer.getInstance().startAutomaticCapture();
        cam0.setResolution(160, 120);
        cam0.setFPS(15);
        cam0.setBrightness(35);
        cam1 = CameraServer.getInstance().addAxisCamera("10.15.18.100");
        cam1.setResolution(320, 240);
        cam1.setBrightness(40);
        
        //Get Alliance from FMS
        alliance = DriverStation.getInstance().getAlliance().toString();
        SmartDashboard.putString("Alliance", alliance);
        
        // instantiate the command used for the autonomous period
        m_chooser = new SendableChooser();
        m_chooser.addObject("Left Drop Off Gear", new Auto1());
        //m_chooser.addObject("Right Drop Off Gear", new Auto2());
        //m_chooser.addObject("Middle Station", new Auto3());
        //m_chooser.addDefault("Do Nothing", new Auto4());
        //m_chooser.addObject("Drive Forward", new Auto5());
        //m_chooser.addObject("Middle and Shoot", new Auto6());
        SmartDashboard.putData("Autonomous Mode Selection", m_chooser);

        //SETTING BRAKE MODE ON DRIVE MOTORS
        rm.driveTrainFrontLeftWheel.setNeutralMode(NeutralMode.Brake);
        rm.driveTrainFrontRightWheel.setNeutralMode(NeutralMode.Brake);
        rm.driveTrainRearLeftWheel.setNeutralMode(NeutralMode.Brake);
        rm.driveTrainRearRightWheel.setNeutralMode(NeutralMode.Brake);
    }

    /**
     * This function is called when the disabled button is hit and first time thru Init().
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	RobotMap.dio8.set(true);
    	RobotMap.dio9.set(true);
    	rm.rioGyro.reset();
        rm.encoderLRear.reset();
        rm.encoderRRear.reset();

/*    	RobotMap.driveTrainFrontLeftWheel.setInverted(true);
    	RobotMap.driveTrainFrontRightWheel.setInverted(true);
    	RobotMap.driveTrainRearLeftWheel.setInverted(true);
    	RobotMap.driveTrainRearRightWheel.setInverted(true);
*/
    	isReversed = true;
    	//RobotMap.pwmIntake.set(0);
    	intakeOn = false;
    	m_drive.stopMotor();

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();

    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        setLights();
    	//rm.rioGyro.reset();
        autoMode = (Command) m_chooser.getSelected();
        if (autoMode != null) autoMode.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autoMode != null) autoMode.cancel();
    	rm.rioGyro.reset();
//    	Servos.servo1.set(Servos.highPosition);
//      Servos.servo2.set(1 - Servos.highPosition);
        setLights();
    	m_drive.setSafetyEnabled(false);

    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    	//COMPUTE JOYSTICK VALUES GIVING DEADSPACE
    	if(Math.abs(oi.mainstick.getX()) >= 0.5) 
    	{	
    		mainstickX = oi.mainstick.getX(); 
    	}
    	else 
    	{ 
    		mainstickX = 0; 
    	}
    	if(Math.abs(oi.mainstick.getY()) >= 0.5) 
    	{	
    		mainstickY = oi.mainstick.getY(); 
    	}
    	else 
    	{ 
    		mainstickY = 0; 
    	}
    	if(Math.abs(oi.mainstick.getZ()) >= 0.25) 
    	{	
    		mainstickZ = oi.mainstick.getZ(); 
    	}
    	else 
    	{ 
    		mainstickZ = 0; 
    	}
    	
    	/* 
    	SmartDashboard.putString("Joystick-X", String.valueOf(oi.mainstick.getX()));
    	SmartDashboard.putString("Joystick-Y", String.valueOf(oi.mainstick.getY()));
    	SmartDashboard.putString("Joystick-Z", String.valueOf(oi.mainstick.getZ()));
    	*/
    	//double gyroAngle = 0.0; 
    	double gyroAngle = rm.rioGyro.getAngle();
    	double leftEncoderCnt = rm.encoderLRear.get();
    	double rightEncoderCnt = rm.encoderRRear.get();
    	//double accelX = rm.rioAccel.getX();
    	//double accelY = rm.rioAccel.getY();
    	//double accelZ = rm.rioAccel.getZ();
    	
    	SmartDashboard.putNumber("Gyro Angle", gyroAngle);
    	SmartDashboard.putNumber("Left Encoder Count", leftEncoderCnt);
    	SmartDashboard.putNumber("Right Encoder Count", rightEncoderCnt);
    	//SmartDashboard.putNumber("Accel X", accelX);
    	//SmartDashboard.putNumber("Accel Y", accelY);
    	//SmartDashboard.putNumber("Accel Z", accelZ);
    		m_drive.driveCartesian((Math.pow(mainstickX, 3) * 1), (Math.pow(mainstickY, 3) * -1), (Math.pow(mainstickZ, 3) * .5), 0.0);
    	
//        RobotMap.dio8.pulse(1);
//        RobotMap.dio9.pulse(0);
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        //LiveWindow..run();
    }
    
    public void setLights() {
        alliance = DriverStation.getInstance().getAlliance().toString();
    	if (alliance == "Red") {
    		RobotMap.dio8.set(true);
    		RobotMap.dio9.set(false);
       	}
    	else if (alliance == "Blue"){
    		RobotMap.dio8.set(false);
    		RobotMap.dio9.set(true);
    	}
    	else {
    		RobotMap.dio8.set(false);
    		RobotMap.dio9.set(false);
       	}
    }
}
